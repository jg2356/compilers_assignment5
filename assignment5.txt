Author: Jose Gomez
Nova Southeastern University
July 3rd 2015
CISC 630
Assignment 5

Written Assignment 5
1. (5.1.2) Extend the SDD of Fig. 5.4 to handle expressions as in Fig. 5.1.
 ____________________________________________________________ 
| Production    | Semantic Rules                             |
|_______________|____________________________________________|
|               |                                            |
| L -> E n      | L.val = E.val                              |
| E -> T E'     | E'.inh = T.val, E.val = E'.syn             |
| E' -> + T E1' | E1'.inh = E'.inh + T.val, E'.syn = E1'.syn |
| E' -> epsilon | E'.syn = E'.inh                            |
| T -> F T'     | T'.inh = F.val, T.val = T'.syn             |
| T' -> * F T1' | T1'.inh = T'.inh * F.val, T'.syn = T1'.syn |
| T' -> epsilon | T'.syn = T'.inh                            |
| F -> (E)      | F.val = E.val                              |
| F -> digit    | F.val = digit.lexval                       |
|_______________|____________________________________________|

2. (5.2.4) This grammar generates binary numbers with a 'decimal' point:

S -> L . L | L
L -> L B | B
B -> 0 | 1

Design an L-attributed SDD to compute S.val, the decimal-number value of an input string. For example, the translation of string 101.101 should be the decimal 5.625.
 ____________________________________________________________________________________________ 
| Production    | Semantic Rules                                                             |
|_______________|____________________________________________________________________________|
|               |                                                                            |
| S -> L1 . L2  | L1.side = 'L', L2.side = 'R', S.val = L1.val + L2.val                      |
| S -> L        | L.side = 'L', S.val = L.val                                                |
| L -> L1 B     | L1.side = L.side, L1.len = L1.len + 1, L.val = L.side == 'L'               |
|               |                                              ? L1.val * 2 + B.val          |
|               |                                              : L1.val + B.val * 2^(-L.len) |
| L -> B        | L.len = 1, L.val = L.side == 'L'                                           |
|               |                  ? B.val                                                   |
|               |                  : B.val/2                                                 |
| B -> 0        | B.val = 0                                                                  |
| B -> 1        | B.val = 1                                                                  |
|_______________|____________________________________________________________________________|

3. (5.4.1) We mentioned in Section 5.4.2 that it is possible to deduce, from the LR state on the parsing stack, what grammar symbol is represented by the state. How would we discover this information?

We could discover what grammar symbol is represented by a given LR state on the parsing stack by consulting the parsing table and looking up the symbol given the current state on the stack.

4. (5.4.3) The following SDT computes the value of a string of 0's and 1's interpreted as a positive, binary integer.

B -> B1 0 { B.val = 2 x B1.val }
   | B1 1 { B.val = 2 x B1.val + 1 }
   | 1 { B.val = 1 }

Rewrite this SDT so the underlying grammar is not left recursive, and yet the same value of B.val is computed for the entire input string.

B -> 1 { A.int = 1 } A
A -> digit { A1.int = 2 * A.int + digit.val } A1 { A.val = A1.val }
   | epsilon { A.val = A.int }
digit -> 0 { digit.val = 0 }
       | 1 { digit.val = 1 }

References
Aho, A., Lam, M., Sethi, R., & Ullman, J. (2007). Compilers Principles, Techniques, &amp; Tools Gradiance (2nd ed.). Boston, MA: Addison-Wesley.
